'use client'

import { useState } from 'react'
import { Button } from './ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card'
import { Input } from './ui/input'
import { Label } from './ui/label'
import { Textarea } from './ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select'
import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar'
import { Badge } from './ui/badge'
import { Separator } from './ui/separator'
import { User, Edit, Save, X, Shield, Bell, Database, Calendar, Heart, MessageCircle, LogOut, Lock, Key, ArrowLeft, Download, FileText } from 'lucide-react'
import { toast } from 'sonner'

interface UserProfileProps {
  user: { name: string; email: string }
  onLogout?: () => void
  onBackToMenu?: () => void
}

// Mock health data for export
const mockHealthData = {
  user: {
    name: "Nguy·ªÖn VƒÉn An",
    email: "nguyen.van.an@email.com",
    age: 65,
    phone: "+84 123 456 789",
    address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
    emergencyContact: "Nguy·ªÖn Th·ªã B - +84 987 654 321",
    medicalHistory: "TƒÉng huy·∫øt √°p, ti·ªÉu ƒë∆∞·ªùng type 2",
    allergies: "Penicillin, h·∫£i s·∫£n",
    currentMedications: "Losartan 50mg (1 vi√™n/ng√†y), Metformin 500mg (2 vi√™n/ng√†y)",
    doctorInfo: "B√°c sƒ© Nguy·ªÖn VƒÉn C - B·ªánh vi·ªán Tim M·∫°ch"
  },
  heartRateData: [
    { date: "2024-01-20", avg: 68, rest: 58, max: 95, measurements: 24 },
    { date: "2024-01-21", avg: 72, rest: 62, max: 88, measurements: 26 },
    { date: "2024-01-22", avg: 70, rest: 60, max: 92, measurements: 23 },
    { date: "2024-01-23", avg: 74, rest: 63, max: 98, measurements: 25 },
    { date: "2024-01-24", avg: 69, rest: 59, max: 87, measurements: 22 },
    { date: "2024-01-25", avg: 71, rest: 61, max: 94, measurements: 24 },
    { date: "2024-01-26", avg: 67, rest: 57, max: 89, measurements: 21 }
  ],
  journalEntries: [
    {
      date: "2024-01-26",
      mood: "T·ªët",
      notes: "H√¥m nay c·∫£m th·∫•y kh√° t·ªët, ch·ªâ h∆°i ƒëau ƒë·∫ßu v√†o bu·ªïi chi·ªÅu. C√≥ th·ªÉ do th·ª©c khuya h√¥m qua."
    },
    {
      date: "2024-01-25", 
      mood: "Tuy·ªát v·ªùi",
      notes: "Ng√†y tuy·ªát v·ªùi! Kh√¥ng c√≥ tri·ªáu ch·ª©ng g√¨ b·∫•t th∆∞·ªùng. Ng·ªß ngon v√† ƒÉn u·ªëng ƒë·∫ßy ƒë·ªß."
    },
    {
      date: "2024-01-24",
      mood: "B√¨nh th∆∞·ªùng", 
      notes: "C·∫£m th·∫•y h∆°i m·ªát m·ªèi v√† kh√≥ ng·ªß. C√≥ th·ªÉ do cƒÉng th·∫≥ng t·ª´ cu·ªôc h·ªçp gia ƒë√¨nh."
    }
  ],
  calendarEvents: [
    {
      date: "2024-01-27",
      time: "08:00",
      title: "U·ªëng thu·ªëc huy·∫øt √°p",
      type: "Thu·ªëc",
      completed: true
    },
    {
      date: "2024-01-27",
      time: "16:00", 
      title: "T·∫≠p th·ªÉ d·ª•c",
      type: "T·∫≠p luy·ªán",
      completed: false
    },
    {
      date: "2024-02-02",
      time: "14:00",
      title: "Kh√°m ƒë·ªãnh k·ª≥",
      type: "H·∫πn kh√°m",
      completed: false
    }
  ],
  stats: {
    totalHeartRateMeasurements: 247,
    aiConversations: 89,
    daysUsed: 45,
    averageHeartRate: 70,
    restingHeartRate: 59,
    maxHeartRate: 98
  }
}

export function UserProfile({ user, onLogout, onBackToMenu }: UserProfileProps) {
  const [isEditing, setIsEditing] = useState(false)
  const [profileData, setProfileData] = useState({
    name: user.name,
    email: user.email,
    phone: '+84 123 456 789',
    dateOfBirth: '1960-05-15',
    gender: 'male',
    address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
    emergencyContact: 'Nguy·ªÖn Th·ªã B - +84 987 654 321',
    medicalHistory: 'TƒÉng huy·∫øt √°p, ti·ªÉu ƒë∆∞·ªùng type 2',
    allergies: 'Penicillin, h·∫£i s·∫£n',
    currentMedications: 'Losartan 50mg (1 vi√™n/ng√†y), Metformin 500mg (2 vi√™n/ng√†y)',
    doctorInfo: 'B√°c sƒ© Nguy·ªÖn VƒÉn C - B·ªánh vi·ªán Tim M·∫°ch'
  })

  const [preferences, setPreferences] = useState({
    notifications: true,
    voiceReminders: true,
    dataSharing: false,
    weeklyReports: true
  })

  const handleSave = () => {
    // In real app, this would save to database
    setIsEditing(false)
    toast.success('ƒê√£ l∆∞u th√¥ng tin c√° nh√¢n!')
  }

  const handleCancel = () => {
    setIsEditing(false)
    // Reset data if needed
  }

  const generateHealthReport = () => {
    const reportDate = new Date().toLocaleDateString('vi-VN')
    
    return `
B√ÅO C√ÅO S·ª®C KH·ªéE TO√ÄN DI·ªÜN
=====================================

Th√¥ng tin ng∆∞·ªùi d√πng:
-------------------------------------
H·ªç t√™n: ${mockHealthData.user.name}
Email: ${mockHealthData.user.email}
Tu·ªïi: ${mockHealthData.user.age}
ƒêi·ªán tho·∫°i: ${mockHealthData.user.phone}
ƒê·ªãa ch·ªâ: ${mockHealthData.user.address}
Li√™n h·ªá kh·∫©n c·∫•p: ${mockHealthData.user.emergencyContact}
B√°c sƒ© ƒëi·ªÅu tr·ªã: ${mockHealthData.user.doctorInfo}
Ng√†y xu·∫•t b√°o c√°o: ${reportDate}

Th√¥ng tin y t·∫ø:
-------------------------------------
Ti·ªÅn s·ª≠ b·ªánh: ${mockHealthData.user.medicalHistory}
D·ªã ·ª©ng: ${mockHealthData.user.allergies}
Thu·ªëc ƒëang s·ª≠ d·ª•ng: ${mockHealthData.user.currentMedications}

Th·ªëng k√™ t·ªïng quan:
-------------------------------------
‚Ä¢ T·ªïng s·ªë l·∫ßn ƒëo nh·ªãp tim: ${mockHealthData.stats.totalHeartRateMeasurements}
‚Ä¢ S·ªë cu·ªôc tr√≤ chuy·ªán v·ªõi AI: ${mockHealthData.stats.aiConversations}
‚Ä¢ S·ªë ng√†y s·ª≠ d·ª•ng ·ª©ng d·ª•ng: ${mockHealthData.stats.daysUsed}
‚Ä¢ Nh·ªãp tim trung b√¨nh: ${mockHealthData.stats.averageHeartRate} bpm
‚Ä¢ Nh·ªãp tim ngh·ªâ: ${mockHealthData.stats.restingHeartRate} bpm
‚Ä¢ Nh·ªãp tim t·ªëi ƒëa: ${mockHealthData.stats.maxHeartRate} bpm

D·ªØ li·ªáu nh·ªãp tim 7 ng√†y g·∫ßn nh·∫•t:
-------------------------------------
${mockHealthData.heartRateData.map(data => 
  `${data.date}: TB=${data.avg}bpm, Ngh·ªâ=${data.rest}bpm, Max=${data.max}bpm (${data.measurements} l·∫ßn ƒëo)`
).join('\n')}

Nh·∫≠t k√Ω s·ª©c kh·ªèe g·∫ßn ƒë√¢y:
-------------------------------------
${mockHealthData.journalEntries.map(entry => 
  `${entry.date} - T√¢m tr·∫°ng: ${entry.mood}\n   ${entry.notes}\n`
).join('\n')}

L·ªãch tr√¨nh s·ª©c kh·ªèe:
-------------------------------------
${mockHealthData.calendarEvents.map(event => 
  `${event.date} ${event.time} - ${event.title} (${event.type}) ${event.completed ? '‚úì' : '‚óã'}`
).join('\n')}

Khuy·∫øn ngh·ªã:
-------------------------------------
‚Ä¢ Nh·ªãp tim c·ªßa b·∫°n ƒëang ·ªü m·ª©c ·ªïn ƒë·ªãnh v√† t·ªët cho ƒë·ªô tu·ªïi
‚Ä¢ H√£y ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô t·∫≠p luy·ªán v√† u·ªëng thu·ªëc ƒë√∫ng gi·ªù
‚Ä¢ Theo d√µi th∆∞·ªùng xuy√™n v√† ghi ch√©p nh·∫≠t k√Ω s·ª©c kh·ªèe
‚Ä¢ ƒê·∫øn kh√°m ƒë·ªãnh k·ª≥ theo l·ªãch h·∫πn v·ªõi b√°c sƒ©

Ghi ch√∫: B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ ·ª©ng d·ª•ng ZenCare AI
v√† ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Vui l√≤ng tham kh·∫£o √Ω ki·∫øn
b√°c sƒ© chuy√™n khoa ƒë·ªÉ c√≥ l·ªùi khuy√™n y t·∫ø ch√≠nh x√°c.

=====================================
ZenCare AI - ·ª®ng d·ª•ng chƒÉm s√≥c s·ª©c kh·ªèe th√¥ng minh
Ng√†y xu·∫•t: ${reportDate}
    `
  }

  const handleExportData = () => {
    try {
      const healthReport = generateHealthReport()
      
      // Create a blob with the health report
      const blob = new Blob([healthReport], { type: 'text/plain;charset=utf-8' })
      
      // Create download link
      const url = window.URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = url
      
      // Generate filename with current date
      const fileName = `BaoCaoSucKhoe_${mockHealthData.user.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.txt`
      link.download = fileName
      
      // Trigger download
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      // Clean up
      window.URL.revokeObjectURL(url)
      
      toast.success('‚úÖ ƒê√£ xu·∫•t b√°o c√°o s·ª©c kh·ªèe th√†nh c√¥ng!')
    } catch (error) {
      console.error('Error exporting data:', error)
      toast.error('‚ùå L·ªói khi xu·∫•t d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.')
    }
  }

  const handleBackupData = () => {
    try {
      // Create comprehensive backup data
      const backupData = {
        exportDate: new Date().toISOString(),
        userProfile: profileData,
        preferences: preferences,
        healthData: mockHealthData,
        version: "1.0"
      }
      
      const blob = new Blob([JSON.stringify(backupData, null, 2)], { 
        type: 'application/json;charset=utf-8' 
      })
      
      const url = window.URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = url
      
      const fileName = `ZenCare_Backup_${new Date().toISOString().split('T')[0]}.json`
      link.download = fileName
      
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      window.URL.revokeObjectURL(url)
      
      toast.success('‚úÖ ƒê√£ sao l∆∞u d·ªØ li·ªáu th√†nh c√¥ng!')
    } catch (error) {
      console.error('Error backing up data:', error)
      toast.error('‚ùå L·ªói khi sao l∆∞u d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.')
    }
  }

  const handleDeleteAllData = () => {
    const confirmed = window.confirm(
      'C·∫¢NH B√ÅO: B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu?\n\n' +
      'H√†nh ƒë·ªông n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn:\n' +
      '‚Ä¢ T·∫•t c·∫£ d·ªØ li·ªáu nh·ªãp tim\n' +
      '‚Ä¢ Nh·∫≠t k√Ω s·ª©c kh·ªèe\n' +
      '‚Ä¢ L·ªãch tr√¨nh v√† nh·∫Øc nh·ªü\n' +
      '‚Ä¢ Th√¥ng tin c√° nh√¢n\n\n' +
      'D·ªØ li·ªáu kh√¥ng th·ªÉ kh√¥i ph·ª•c sau khi x√≥a!'
    )
    
    if (confirmed) {
      const doubleConfirm = window.confirm(
        'X√°c nh·∫≠n l·∫ßn cu·ªëi: B·∫°n TH·∫¨T S·ª∞ mu·ªën x√≥a t·∫•t c·∫£ d·ªØ li·ªáu?\n\n' +
        'Nh·∫≠p "X√ìA T·∫§T C·∫¢" ƒë·ªÉ x√°c nh·∫≠n:'
      )
      
      if (doubleConfirm) {
        // In real app, this would call API to delete all user data
        toast.success('üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu. T√†i kho·∫£n s·∫Ω ƒë∆∞·ª£c ƒëƒÉng xu·∫•t.')
        
        // Logout user after deletion
        setTimeout(() => {
          if (onLogout) {
            onLogout()
          }
        }, 2000)
      }
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 p-4">
      <div className="max-w-6xl mx-auto space-y-6">
        
        {/* Header */}
        {onBackToMenu && (
          <div className="flex items-center gap-4 bg-white/80 backdrop-blur-sm rounded-2xl p-4 shadow-sm border border-white/20">
            <Button
              variant="ghost"
              size="sm"
              onClick={onBackToMenu}
              className="text-gray-600 hover:text-gray-900"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
            </Button>
            <h1 className="text-xl font-medium text-gray-800">H·ªì s∆° ng∆∞·ªùi d√πng</h1>
          </div>
        )}
    
        <div className="space-y-6">
      {/* Profile Header */}
      <Card className="overflow-hidden">
        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6">
          <div className="flex items-center gap-6">
            <div className="relative">
              <Avatar className="w-24 h-24 border-4 border-white shadow-lg">
                <AvatarImage src={`https://api.dicebear.com/7.x/avataaars/svg?seed=${user.email}`} />
                <AvatarFallback className="text-2xl bg-blue-100 text-blue-600">
                  {user.name.charAt(0).toUpperCase()}
                </AvatarFallback>
              </Avatar>
              <div className="absolute -bottom-1 -right-1 w-6 h-6 bg-green-500 border-2 border-white rounded-full"></div>
            </div>
            <div className="flex-1">
              <h1 className="text-3xl font-semibold text-gray-900 mb-1">{profileData.name}</h1>
              <p className="text-gray-600 mb-3">{profileData.email}</p>
              <div className="flex flex-wrap gap-2">
                <Badge variant="secondary" className="bg-blue-100 text-blue-700 border-blue-200">
                  Ng∆∞·ªùi cao tu·ªïi
                </Badge>
                <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                  <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                  ƒê√£ x√°c th·ª±c
                </Badge>
              </div>
            </div>

          </div>
        </div>
      </Card>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-red-50 rounded-lg">
                <Heart className="w-5 h-5 text-red-500" />
              </div>
              <div>
                <p className="text-sm text-gray-600">S·ªë l·∫ßn ƒëo tim</p>
                <p className="text-lg font-semibold">247</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-50 rounded-lg">
                <MessageCircle className="w-5 h-5 text-blue-500" />
              </div>
              <div>
                <p className="text-sm text-gray-600">Cu·ªôc tr√≤ chuy·ªán AI</p>
                <p className="text-lg font-semibold">89</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-yellow-50 rounded-lg">
                <Calendar className="w-5 h-5 text-yellow-500" />
              </div>
              <div>
                <p className="text-sm text-gray-600">Ng√†y s·ª≠ d·ª•ng</p>
                <p className="text-lg font-semibold">45</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-2 2xl:grid-cols-3 gap-6">
        {/* Personal Information */}
        <Card className="xl:col-span-1 2xl:col-span-2">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="flex items-center gap-2">
                  <User className="w-5 h-5 text-blue-600" />
                  Th√¥ng tin c√° nh√¢n
                </CardTitle>
                <CardDescription>Th√¥ng tin c∆° b·∫£n v√† li√™n h·ªá</CardDescription>
              </div>
              <Button 
                onClick={() => setIsEditing(!isEditing)}
                variant={isEditing ? "outline" : "default"}
                size="sm"
              >
                {isEditing ? <X className="w-4 h-4 mr-2" /> : <Edit className="w-4 h-4 mr-2" />}
                {isEditing ? 'H·ªßy' : 'Ch·ªânh s·ª≠a'}
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="name">H·ªç v√† t√™n</Label>
                <Input
                  id="name"
                  value={profileData.name}
                  onChange={(e) => setProfileData({...profileData, name: e.target.value})}
                  disabled={!isEditing}
                />
              </div>
              <div>
                <Label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</Label>
                <Input
                  id="phone"
                  value={profileData.phone}
                  onChange={(e) => setProfileData({...profileData, phone: e.target.value})}
                  disabled={!isEditing}
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="dob">Ng√†y sinh</Label>
                <Input
                  id="dob"
                  type="date"
                  value={profileData.dateOfBirth}
                  onChange={(e) => setProfileData({...profileData, dateOfBirth: e.target.value})}
                  disabled={!isEditing}
                />
              </div>
              <div>
                <Label htmlFor="gender">Gi·ªõi t√≠nh</Label>
                <Select 
                  value={profileData.gender} 
                  onValueChange={(value) => setProfileData({...profileData, gender: value})}
                  disabled={!isEditing}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="male">Nam</SelectItem>
                    <SelectItem value="female">N·ªØ</SelectItem>
                    <SelectItem value="other">Kh√°c</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div>
              <Label htmlFor="address">ƒê·ªãa ch·ªâ</Label>
              <Textarea
                id="address"
                value={profileData.address}
                onChange={(e) => setProfileData({...profileData, address: e.target.value})}
                disabled={!isEditing}
                rows={2}
              />
            </div>

            <div>
              <Label htmlFor="emergency">Li√™n h·ªá kh·∫©n c·∫•p</Label>
              <Input
                id="emergency"
                value={profileData.emergencyContact}
                onChange={(e) => setProfileData({...profileData, emergencyContact: e.target.value})}
                disabled={!isEditing}
                placeholder="T√™n - S·ªë ƒëi·ªán tho·∫°i"
              />
            </div>
          </CardContent>
        </Card>

        {/* Medical Information */}
        <Card className="xl:col-span-1 2xl:col-span-1">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="w-5 h-5 text-red-600" />
              Th√¥ng tin y t·∫ø
            </CardTitle>
            <CardDescription>L·ªãch s·ª≠ b·ªánh √°n v√† thu·ªëc men</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="medical-history">Ti·ªÅn s·ª≠ b·ªánh</Label>
              <Textarea
                id="medical-history"
                value={profileData.medicalHistory}
                onChange={(e) => setProfileData({...profileData, medicalHistory: e.target.value})}
                disabled={!isEditing}
                rows={2}
                placeholder="C√°c b·ªánh l√Ω hi·ªán t·∫°i v√† ƒë√£ t·ª´ng m·∫Øc"
              />
            </div>

            <div>
              <Label htmlFor="allergies">D·ªã ·ª©ng</Label>
              <Textarea
                id="allergies"
                value={profileData.allergies}
                onChange={(e) => setProfileData({...profileData, allergies: e.target.value})}
                disabled={!isEditing}
                rows={2}
                placeholder="Thu·ªëc, th·ª±c ph·∫©m ho·∫∑c ch·∫•t g√¢y d·ªã ·ª©ng"
              />
            </div>

            <div>
              <Label htmlFor="medications">Thu·ªëc ƒëang s·ª≠ d·ª•ng</Label>
              <Textarea
                id="medications"
                value={profileData.currentMedications}
                onChange={(e) => setProfileData({...profileData, currentMedications: e.target.value})}
                disabled={!isEditing}
                rows={3}
                placeholder="T√™n thu·ªëc, li·ªÅu l∆∞·ª£ng v√† c√°ch d√πng"
              />
            </div>

            <div>
              <Label htmlFor="doctor">B√°c sƒ© ƒëi·ªÅu tr·ªã</Label>
              <Input
                id="doctor"
                value={profileData.doctorInfo}
                onChange={(e) => setProfileData({...profileData, doctorInfo: e.target.value})}
                disabled={!isEditing}
                placeholder="T√™n b√°c sƒ© v√† b·ªánh vi·ªán"
              />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* App Preferences */}
      <Card className="2xl:col-span-3">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bell className="w-5 h-5 text-green-600" />
            C√†i ƒë·∫∑t ·ª©ng d·ª•ng
          </CardTitle>
          <CardDescription>T√πy ch·ªânh th√¥ng b√°o v√† quy·ªÅn ri√™ng t∆∞</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6">
            <div className="flex items-center justify-between p-4 border rounded-lg">
              <div>
                <p className="font-medium">Th√¥ng b√°o push</p>
                <p className="text-sm text-muted-foreground">Nh·∫≠n th√¥ng b√°o nh·∫Øc nh·ªü v√† c·∫≠p nh·∫≠t</p>
              </div>
              <Button
                variant={preferences.notifications ? "default" : "outline"}
                size="sm"
                onClick={() => setPreferences({...preferences, notifications: !preferences.notifications})}
              >
                {preferences.notifications ? "B·∫≠t" : "T·∫Øt"}
              </Button>
            </div>

            <div className="flex items-center justify-between p-4 border rounded-lg">
              <div>
                <p className="font-medium">Nh·∫Øc nh·ªü b·∫±ng gi·ªçng n√≥i</p>
                <p className="text-sm text-muted-foreground">Ph√°t √¢m thanh c√°c th√¥ng b√°o quan tr·ªçng</p>
              </div>
              <Button
                variant={preferences.voiceReminders ? "default" : "outline"}
                size="sm"
                onClick={() => setPreferences({...preferences, voiceReminders: !preferences.voiceReminders})}
              >
                {preferences.voiceReminders ? "B·∫≠t" : "T·∫Øt"}
              </Button>
            </div>

            <div className="flex items-center justify-between p-4 border rounded-lg">
              <div>
                <p className="font-medium">Chia s·∫ª d·ªØ li·ªáu</p>
                <p className="text-sm text-muted-foreground">Chia s·∫ª d·ªØ li·ªáu v·ªõi b√°c sƒ© v√† gia ƒë√¨nh</p>
              </div>
              <Button
                variant={preferences.dataSharing ? "default" : "outline"}
                size="sm"
                onClick={() => setPreferences({...preferences, dataSharing: !preferences.dataSharing})}
              >
                {preferences.dataSharing ? "B·∫≠t" : "T·∫Øt"}
              </Button>
            </div>

            <div className="flex items-center justify-between p-4 border rounded-lg">
              <div>
                <p className="font-medium">B√°o c√°o h√†ng tu·∫ßn</p>
                <p className="text-sm text-muted-foreground">Nh·∫≠n b√°o c√°o t·ªïng h·ª£p s·ª©c kh·ªèe m·ªói tu·∫ßn</p>
              </div>
              <Button
                variant={preferences.weeklyReports ? "default" : "outline"}
                size="sm"
                onClick={() => setPreferences({...preferences, weeklyReports: !preferences.weeklyReports})}
              >
                {preferences.weeklyReports ? "B·∫≠t" : "T·∫Øt"}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Data Export - Enhanced with Real Data */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Database className="w-5 h-5 text-purple-600" />
              Qu·∫£n l√Ω d·ªØ li·ªáu
            </CardTitle>
            <CardDescription>Xu·∫•t v√† sao l∆∞u d·ªØ li·ªáu s·ª©c kh·ªèe</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <Button 
                variant="outline" 
                className="w-full justify-start" 
                onClick={handleExportData}
              >
                <FileText className="w-4 h-4 mr-2" />
                Xu·∫•t b√°o c√°o s·ª©c kh·ªèe
                <span className="ml-auto text-xs text-muted-foreground">TXT</span>
              </Button>
              
              <Button 
                variant="outline" 
                className="w-full justify-start" 
                onClick={handleBackupData}
              >
                <Download className="w-4 h-4 mr-2" />
                Sao l∆∞u d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
                <span className="ml-auto text-xs text-muted-foreground">JSON</span>
              </Button>
              
              <div className="pt-2 border-t">
                <p className="text-xs text-muted-foreground mb-3">
                  D·ªØ li·ªáu bao g·ªìm: {mockHealthData.stats.totalHeartRateMeasurements} l·∫ßn ƒëo nh·ªãp tim, 
                  {mockHealthData.journalEntries.length} nh·∫≠t k√Ω, {mockHealthData.calendarEvents.length} s·ª± ki·ªán l·ªãch
                </p>
                
                <Button 
                  variant="destructive" 
                  className="w-full justify-start" 
                  onClick={handleDeleteAllData}
                >
                  <X className="w-4 h-4 mr-2" />
                  X√≥a t·∫•t c·∫£ d·ªØ li·ªáu
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Account Security */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lock className="w-5 h-5 text-red-600" />
              B·∫£o m·∫≠t t√†i kho·∫£n
            </CardTitle>
            <CardDescription>Qu·∫£n l√Ω m·∫≠t kh·∫©u v√† ƒëƒÉng xu·∫•t</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <Button variant="outline" className="w-full justify-start" onClick={() => toast.info('T√≠nh nƒÉng ƒë·ªïi m·∫≠t kh·∫©u s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn')}>
                <Key className="w-4 h-4 mr-2" />
                ƒê·ªïi m·∫≠t kh·∫©u
              </Button>
              <Button variant="outline" className="w-full justify-start" onClick={() => toast.info('T√≠nh nƒÉng x√°c th·ª±c 2 l·ªõp s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn')}>
                <Shield className="w-4 h-4 mr-2" />
                X√°c th·ª±c 2 l·ªõp
              </Button>
              <Separator />
              {onLogout && (
                <Button 
                  variant="destructive" 
                  className="w-full justify-start"
                  onClick={() => {
                    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?')) {
                      onLogout()
                    }
                  }}
                >
                  <LogOut className="w-4 h-4 mr-2" />
                  ƒêƒÉng xu·∫•t
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Save Changes */}
      {isEditing && (
        <div className="flex gap-4">
          <Button onClick={handleSave} className="flex-1">
            <Save className="w-4 h-4 mr-2" />
            L∆∞u thay ƒë·ªïi
          </Button>
          <Button onClick={handleCancel} variant="outline" className="flex-1">
            <X className="w-4 h-4 mr-2" />
            H·ªßy b·ªè
          </Button>
        </div>
      )}
    </div>
      </div>
    </div>
  )
}
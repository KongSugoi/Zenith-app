'use client'

import { useState, useRef, useEffect, ReactNode } from 'react'
import { Button } from './ui/button'
import { Card, CardContent} from './ui/card'
import { Avatar, AvatarFallback } from './ui/avatar'
import { Input } from './ui/input'
import { 
  Activity, Calendar, Heart, BookOpen, 
  Mic, MicOff, Type, Send, LogOut, Settings, User 
} from "lucide-react";
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator } from "./ui/dropdown-menu";

// interface AIContact {
//   id: string
//   name: string
//   avatar?: string
//   personality: string
//   description: string
//   isDefault: boolean
//   lastMessage?: string
//   lastActive?: Date
//   messageCount: number
// }

interface Message {
  isUser: boolean
  text: ReactNode
  id: string
  type: 'user' | 'ai'
  content: string
  timestamp: Date
  isVoice?: boolean
}

interface ChatResponse {
  reply: string
  command?: string
}

interface AIChatProps {
  user: {
    id: string
    name: string
    avatar?: string
    onLogout: () => void
  }
  onNavigate: (page: string) => void
}

export function AIChat({user, onNavigate}: AIChatProps) {
  
  const currentTime = new Date();
  // const defaultAIContact: AIContact = {
  //   id: 'default',
  //   name: 'Tr·ª£ l√Ω AI',
  //   avatar: 'ü§ñ',
  //   personality: 'T·∫≠n t√¢m, ki√™n nh·∫´n v√† th√¢n thi·ªán',
  //   description: 'Tr·ª£ l√Ω AI cho ng∆∞·ªùi cao tu·ªïi',
  //   isDefault: true,
  //   messageCount: 0
  // }

  // // const currentAIContact = defaultAIContact

  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: getWelcomeMessage(),
      timestamp: new Date(),
      isUser: true,
      text: getWelcomeMessage(),
    }
  ])
  const [inputText, setInputText] = useState('')
  const [showTextInput, setShowTextInput] = useState(false);
  const [isListening, setIsListening] = useState(false)
  const [_isSpeaking, setIsSpeaking] = useState(false)
  const [microphonePermission, setMicrophonePermission] = useState<'granted' | 'denied' | 'pending'>('pending')
  const [_speechError, setSpeechError] = useState<string | null>(null)
  const [_interimTranscript, setInterimTranscript] = useState('')
  const [_finalTranscript, setFinalTranscript] = useState('')

  const recognitionRef = useRef<any>(null)
  const speechSynthesisRef = useRef<SpeechSynthesis | null>(null)
  const messagesContainerRef = useRef<HTMLDivElement>(null)
  const scrollAreaRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (typeof window !== 'undefined') {
      speechSynthesisRef.current = window.speechSynthesis
    }
  }, [])

  useEffect(() => {
    if (messagesContainerRef.current) {
      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight
    }
  }, [messages])
  
  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [messages])

  useEffect(() => {
    let latestFinalTranscript = ''

    const initializeSpeechRecognition = async () => {
      try {
        if (typeof window === 'undefined' || !('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
          setSpeechError('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ nh·∫≠n di·ªán gi·ªçng n√≥i')
          return
        }

        try {
          const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
          stream.getTracks().forEach(track => track.stop())
          setMicrophonePermission('granted')
          setSpeechError(null)
        } catch {
          setMicrophonePermission('denied')
          setSpeechError('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p microphone. Vui l√≤ng c·∫•p quy·ªÅn trong c√†i ƒë·∫∑t tr√¨nh duy·ªát.')
          return
        }

        const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition
        recognitionRef.current = new SpeechRecognition()
        recognitionRef.current.continuous = true
        recognitionRef.current.interimResults = true
        recognitionRef.current.lang = 'vi-VN'

        recognitionRef.current.onresult = (event: any) => {
          let interim = ''
          let final = ''
          for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript
            if (event.results[i].isFinal) {
              final += transcript
            } else {
              interim += transcript
            }
          }
          latestFinalTranscript += final
          setInterimTranscript(interim)
          setFinalTranscript(latestFinalTranscript)
        }

        recognitionRef.current.onerror = (event: any) => {
          console.error('Speech recognition error:', event.error)
          setIsListening(false)
          switch (event.error) {
            case 'not-allowed':
              setSpeechError('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p microphone. Vui l√≤ng c·∫•p quy·ªÅn v√† th·ª≠ l·∫°i.')
              setMicrophonePermission('denied')
              break
            case 'no-speech':
              setSpeechError('Kh√¥ng ph√°t hi·ªán gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i.')
              break
            case 'audio-capture':
              setSpeechError('Kh√¥ng th·ªÉ truy c·∫≠p microphone. Ki·ªÉm tra k·∫øt n·ªëi microphone.')
              break
            case 'network':
              setSpeechError('L·ªói m·∫°ng. Ki·ªÉm tra k·∫øt n·ªëi internet.')
              break
            default:
              setSpeechError('L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i.')
          }
        }

        recognitionRef.current.onend = () => {
          setIsListening(false)
          const text = latestFinalTranscript.trim()
          if (text) {
            setInputText(text)
            handleSendMessage(text)
          }
          latestFinalTranscript = ''
          setFinalTranscript('')
          setInterimTranscript('')
        }

      } catch (error) {
        console.error('Error initializing speech recognition:', error)
        setSpeechError('Kh√¥ng th·ªÉ kh·ªüi t·∫°o nh·∫≠n di·ªán gi·ªçng n√≥i')
      }
    }

    initializeSpeechRecognition()

    return () => {
      if (recognitionRef.current) recognitionRef.current.stop()
    }
  }, [])

  function getWelcomeMessage(): string {
    return `Ch√°u ch√†o b√°c ·∫°! Ch√°u l√† m·ªôt tr·ª£ l√Ω AI, kh√¥ng c√≥ t√™n ri√™ng ƒë√¢u ·∫°. B√°c c√≥ th·ªÉ g·ªçi ch√°u l√† "tr·ª£ l√Ω" ho·∫∑c "b·∫°n ƒë·ªìng h√†nh" c≈©ng ƒë∆∞·ª£c ·∫°.\n\nCh√°u ·ªü ƒë√¢y ƒë·ªÉ gi√∫p ƒë·ª° b√°c m·ªçi vi·ªác, t·ª´ tr·∫£ l·ªùi c√¢u h·ªèi, tr√≤ chuy·ªán, cho ƒë·∫øn h·ªó tr·ª£ nh·ªØng c√¥ng vi·ªác nh·ªè nh·∫∑t kh√°c. N·∫øu c√≥ g√¨ c·∫ßn ch√°u gi√∫p, b√°c c·ª© n√≥i nh√©. Ch√°u lu√¥n s·∫µn l√≤ng ·∫°.`
  }

  const startListening = () => {
    if (microphonePermission === 'denied') {
      setSpeechError('Vui l√≤ng c·∫•p quy·ªÅn microphone trong c√†i ƒë·∫∑t tr√¨nh duy·ªát v√† t·∫£i l·∫°i trang')
      return
    }

    if (recognitionRef.current && !isListening) {
      try {
        setIsListening(true)
        setSpeechError(null)
        setFinalTranscript('')
        setInterimTranscript('')
        recognitionRef.current.start()
      } catch (error) {
        console.error('Error starting speech recognition:', error)
        setIsListening(false)
        setSpeechError('Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n di·ªán gi·ªçng n√≥i')
      }
    }
  }

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop()
      setIsListening(false)
    }
  }

  const speakText = (text: string) => {
    if (speechSynthesisRef.current && text) {
      speechSynthesisRef.current.cancel()
      const utterance = new SpeechSynthesisUtterance(text)
      utterance.lang = 'vi-VN'
      utterance.rate = 0.9
      utterance.pitch = 1
      utterance.volume = 0.8
      utterance.onstart = () => setIsSpeaking(true)
      utterance.onend = () => setIsSpeaking(false)
      utterance.onerror = () => setIsSpeaking(false)
      speechSynthesisRef.current.speak(utterance)
    }
  }

  const getAIResponse = async (prompt: string): Promise<ChatResponse> => {
    try {
      const response = await fetch("/chat", {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt })
      })
      const data: ChatResponse = await response.json()
      return data || 'T√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng?'
    } catch (error) {
      console.error('L·ªói g·ªçi AI API:', error)
      return { reply: 'ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau.' }
    }
  }

  const handleSendMessage = async (messageContent?: string) => {
    const content = messageContent || inputText.trim()
    if (!content) return
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content,
      timestamp: new Date(),
      isUser: true,
      text: content,
    }

    setMessages(prev => [...prev, userMessage])
    setInputText('')

    const AIResponse = await getAIResponse(content)
    const AIMessage: Message = {
      id: (Date.now() + 1).toString(),
      type: 'ai',
      content: AIResponse.reply,
      timestamp: new Date(),
      isUser: false,
      text: AIResponse.reply,
    }
    speakText(AIResponse.reply)

    // if (AIResponse.command) {
    //     executeCommand(AIResponse.command)
    // }
    
    setMessages(prev => [...prev, AIMessage])
  }

  const getGreeting = () => "Xin ch√†o";
  const formatDate = (date: Date) => date.toLocaleDateString("vi-VN");
  const formatTime = (date: Date) => date.toLocaleTimeString("vi-VN", { hour: "2-digit", minute: "2-digit" });

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 via-white to-indigo-100 p-3 sm:p-4">
      <div className="max-w-4xl mx-auto space-y-4 sm:space-y-6">

        {/* Header */}
        <div className="flex items-center justify-between bg-white/80 backdrop-blur-sm rounded-xl sm:rounded-2xl p-3 sm:p-4 lg:p-6 shadow-sm border border-white/20">
          <div className="space-y-0.5 sm:space-y-1">
            <h1 className="text-xl sm:text-2xl lg:text-3xl font-medium text-gray-800">
              ZenCare AI
            </h1>
            <p className="text-base sm:text-lg text-gray-600">
              {getGreeting()}, {user.name}
            </p>
            <p className="text-xs sm:text-sm text-gray-500">
              {formatDate(currentTime)} ‚Ä¢ {formatTime(currentTime)}
            </p>
          </div>
          
          {/* User Menu */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button 
                variant="ghost" 
                className="relative h-12 w-12 sm:h-16 sm:w-16 rounded-full hover:bg-white/50 transition-colors"
              >
                <Avatar className="h-10 w-10 sm:h-14 sm:w-14 border-2 border-white shadow-md">
                 
                  <AvatarFallback className="bg-gradient-to-br from-blue-500 to-purple-600 text-white text-sm sm:text-lg">
                    {user.name.charAt(0).toUpperCase()}
                  </AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end">
              <DropdownMenuItem 
                onClick={() => onNavigate('profile')}
                className="cursor-pointer"
              >
                <User className="mr-2 h-4 w-4" />
                <span>H·ªì s∆° c·ªßa t√¥i</span>
              </DropdownMenuItem>
              <DropdownMenuItem 
                onClick={() => onNavigate('settings')}
                className="cursor-pointer"
              >
                <Settings className="mr-2 h-4 w-4" />
                <span>C√†i ƒë·∫∑t</span>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem 
                onClick={user.onLogout}
                className="cursor-pointer text-red-600 focus:text-red-600"
              >
                <LogOut className="mr-2 h-4 w-4" />
                <span>ƒêƒÉng xu·∫•t</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>

        {/* Quick Action Buttons */}
        <div className="grid grid-cols-2 gap-3 sm:gap-4 w-full">
          <Button 
            onClick={() => onNavigate("heart-rate")}
            className="h-40 sm:h-44 lg:h-48 flex flex-col items-center justify-center space-y-3 sm:space-y-4 bg-white hover:bg-red-50 border-2 border-red-400 text-red-600 font-semibold shadow-md transition-all duration-200 hover:scale-105"
          >
            <Activity className="h-12 w-12 sm:h-14 sm:w-14 lg:h-16 lg:w-16" />
            <span className="text-lg sm:text-xl lg:text-2xl font-semibold">Nh·ªãp Tim</span>
          </Button>

          <Button 
            onClick={() => onNavigate("calendar")}
            className="h-40 sm:h-44 lg:h-48 flex flex-col items-center justify-center space-y-3 sm:space-y-4 bg-white hover:bg-green-50 border-2 border-green-400 text-green-600 font-semibold shadow-md transition-all duration-200 hover:scale-105"
          >
            <Calendar className="h-12 w-12 sm:h-14 sm:w-14 lg:h-16 lg:w-16" />
            <span className="text-lg sm:text-xl lg:text-2xl font-semibold">L·ªãch</span>
          </Button>

          <Button 
            onClick={() => onNavigate("health-data")}
            className="h-40 sm:h-44 lg:h-48 flex flex-col items-center justify-center space-y-3 sm:space-y-4 bg-white hover:bg-blue-50 border-2 border-blue-400 text-blue-600 font-semibold shadow-md transition-all duration-200 hover:scale-105"
          >
            <Heart className="h-12 w-12 sm:h-14 sm:w-14 lg:h-16 lg:w-16" />
            <span className="text-lg sm:text-xl lg:text-2xl font-semibold">S·ª©c Kh·ªèe</span>
          </Button>

          <Button 
            onClick={() => onNavigate("health-journal")}
            className="h-40 sm:h-44 lg:h-48 flex flex-col items-center justify-center space-y-3 sm:space-y-4 bg-white hover:bg-purple-50 border-2 border-purple-400 text-purple-600 font-semibold shadow-md transition-all duration-200 hover:scale-105"
          >
            <BookOpen className="h-12 w-12 sm:h-14 sm:w-14 lg:h-16 lg:w-16" />
            <span className="text-lg sm:text-xl lg:text-2xl font-semibold">Nh·∫≠t K√Ω</span>
          </Button>
        </div>


        {/* Voice/Text Input */}
        <Card className="bg-white border-2 border-blue-300 shadow-md">
          <CardContent className="p-4 text-center space-y-4">
            <div className="flex justify-center space-x-2">
              <Button variant={!showTextInput ? "default" : "outline"} onClick={() => setShowTextInput(false)}>
                <Mic className="h-4 w-4 mr-2" /> Gi·ªçng n√≥i
              </Button>
              <Button variant={showTextInput ? "default" : "outline"} onClick={() => setShowTextInput(true)}>
                <Type className="h-4 w-4 mr-2" /> VƒÉn b·∫£n
              </Button>
            </div>

            {!showTextInput ? (
              <Button
                size="lg"
                onClick={isListening ? stopListening : startListening}
                className={`h-32 w-32 rounded-full text-white shadow-xl ${
                  isListening ? 'bg-red-500 animate-pulse' : 'bg-blue-500 hover:bg-blue-600'
                }`}
              >
                {isListening ? <MicOff className="h-12 w-12" /> : <Mic className="h-12 w-12" />}
              </Button>
            ) : (
              <form
                onSubmit={(e) => {
                  e.preventDefault();
                  handleSendMessage();
                }}
                className="flex space-x-2"
              >
                <Input
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  placeholder="Nh·∫≠p y√™u c·∫ßu..."
                  className="flex-1"
                />
                <Button type="submit" disabled={!inputText.trim()}>
                  <Send className="h-4 w-4" />
                </Button>
              </form>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
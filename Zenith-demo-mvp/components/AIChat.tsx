'use client'

import { useState, useRef, useEffect } from 'react'
import { Button } from './ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card'
import { Avatar, AvatarFallback } from './ui/avatar'
import { Badge } from './ui/badge'
import { Input } from './ui/input'
import { ScrollArea } from './ui/scroll-area'
import { ArrowLeft, Mic, MicOff, Send, Volume2, Heart, Baby, User, Stethoscope } from 'lucide-react'

interface AIContact {
  id: string
  name: string
  avatar?: string
  personality: string
  description: string
  isDefault: boolean
  lastMessage?: string
  lastActive?: Date
  messageCount: number
}

interface Message {
  id: string
  type: 'user' | 'ai'
  content: string
  timestamp: Date
  isVoice?: boolean
}

interface AIChatProps {
  aiContact: AIContact
  onBack: () => void
  onUpdateLastMessage: (message: string) => void
}

export function AIChat({ aiContact, onBack, onUpdateLastMessage }: AIChatProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: getWelcomeMessage(aiContact),
      timestamp: new Date(),
    }
  ])
  const [inputText, setInputText] = useState('')
  const [isRecording, setIsRecording] = useState(false)
  const [isListening, setIsListening] = useState(false)
  const scrollAreaRef = useRef<HTMLDivElement>(null)

  const roleIcons = {
    doctor: Stethoscope,
    child: Baby,
    family: Heart,
    friend: User
  }

  const roleColors = {
    doctor: 'bg-red-100 text-red-800',
    child: 'bg-pink-100 text-pink-800',
    family: 'bg-blue-100 text-blue-800',
    friend: 'bg-green-100 text-green-800'
  }

  useEffect(() => {
    // Scroll to bottom when new messages are added
    if (scrollAreaRef.current) {
      // scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [messages])

  function getWelcomeMessage(ai: AIContact): string {
    return `Ch√†o b·∫°n ·∫°! M√¨nh l√† m·ªôt tr·ª£ l√Ω AI, kh√¥ng c√≥ t√™n ri√™ng ƒë√¢u ·∫°. B·∫°n c√≥ th·ªÉ g·ªçi m√¨nh l√† \"tr·ª£ l√Ω\" ho·∫∑c \"b·∫°n ƒë·ªìng h√†nh\" c≈©ng ƒë∆∞·ª£c ·∫°.\n\nM√¨nh ·ªü ƒë√¢y ƒë·ªÉ gi√∫p ƒë·ª° b·∫°n m·ªçi vi·ªác, t·ª´ tr·∫£ l·ªùi c√¢u h·ªèi, tr√≤ chuy·ªán, cho ƒë·∫øn h·ªó tr·ª£ nh·ªØng c√¥ng vi·ªác nh·ªè nh·∫∑t kh√°c. N·∫øu c√≥ g√¨ c·∫ßn m√¨nh gi√∫p, b·∫°n c·ª© n√≥i nh√©. M√¨nh lu√¥n s·∫µn l√≤ng ·∫°.`
  }

  const getAIResponse = async (prompt: string): Promise<string> => {
    try {
      const response = await fetch("/chat", {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt })
      })
      const data = await response.json()
      return data.reply || 'T√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng?'
    } catch (error) {
      console.error('L·ªói g·ªçi AI API:', error)
      return 'ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau.'
    }
  }

  const handleSendMessage = async () => {
    if (!inputText.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputText,
      timestamp: new Date(),
    }

    setMessages(prev => [...prev, userMessage])
    const prompt = inputText
    setInputText('')

    const AIResponse = await getAIResponse(prompt)
    const AIMessage: Message = {
      id: (Date.now() + 1).toString(),
      type: 'ai',
      content: AIResponse,
      timestamp: new Date(),
    }

    // setMessages(prev => [...prev, AIMessage])
    setMessages(prev => {
      const newMessages = [...prev, AIMessage]
      console.log('üì© T·∫•t c·∫£ tin nh·∫Øn sau ph·∫£n h·ªìi AI:', newMessages)
      return newMessages
    })
    onUpdateLastMessage(AIResponse)
  }

  const handleVoiceRecord = () => {
    if (!isRecording) {
      setIsRecording(true)
      setIsListening(true)
      // Simulate voice recording
      setTimeout(() => {
        setIsRecording(false)
        setIsListening(false)
        // Simulate voice to text based on AI role
        const voiceTexts = {
          doctor: "G·∫ßn ƒë√¢y t√¥i hay b·ªã ƒëau ƒë·∫ßu",
          child: "Con nh·ªõ b·ªë m·∫π l·∫Øm",
          family: "H√¥m nay t√¥i c·∫£m th·∫•y h∆°i bu·ªìn",
          friend: "Th·ªùi ti·∫øt h√¥m nay ƒë·∫πp qu√°"
        }
        setInputText("Ch·ª©c nƒÉng hi·ªán ch∆∞a s·∫µn s√†ng!")
      }, 3000)
    } else {
      setIsRecording(false)
      setIsListening(false)
    }
  }

  const handlePlayVoice = (message: Message) => {
    // Simulate text to speech
    alert(`ƒêang ph√°t √¢m thanh: "${message.content}"`)
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center gap-4">
            <Button variant="outline" size="sm" onClick={onBack}>
              <ArrowLeft className="w-4 h-4" />
            </Button>
            
            <Avatar className="w-12 h-12">
              <AvatarFallback className="text-xl">
                {aiContact.avatar || 'ü§ñ'}
              </AvatarFallback>
            </Avatar>
            
            <div className="flex-1">
              <div className="flex items-center gap-2">
                <CardTitle className="text-lg">{aiContact.name}</CardTitle>
              </div>
              <CardDescription>{aiContact.description}</CardDescription>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Chat Interface */}
      <Card>
        <CardContent className="p-4">
          {/* Chat Messages */}
          <ScrollArea ref={scrollAreaRef} className="h-96 mb-4 border rounded-lg p-4">
            <div className="space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  {message.type === 'ai' && (
                    <Avatar className="w-8 h-8">
                      <AvatarFallback className="text-sm">
                        {aiContact.avatar || 'ü§ñ'}
                      </AvatarFallback>
                    </Avatar>
                  )}
                  
                  <div className={`max-w-xs lg:max-w-md ${message.type === 'user' ? 'order-first' : ''}`}>
                    <div
                      className={`rounded-lg px-4 py-2 ${
                        message.type === 'user'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-100 text-gray-900'
                      }`}
                    >
                      <p className="text-sm">{message.content}</p>
                      {message.type === 'ai' && (
                        <Button
                          onClick={() => handlePlayVoice(message)}
                          variant="ghost"
                          size="sm"
                          className="mt-2 h-6 p-1 text-xs"
                        >
                          <Volume2 className="w-3 h-3" />
                          Ph√°t √¢m
                        </Button>
                      )}
                    </div>
                    <p className="text-xs text-muted-foreground mt-1">
                      {message.timestamp.toLocaleTimeString('vi-VN', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </p>
                  </div>

                  {message.type === 'user' && (
                    <Avatar className="w-8 h-8">
                      <AvatarFallback className="bg-green-100 text-green-600 text-sm">
                        B·∫°n
                      </AvatarFallback>
                    </Avatar>
                  )}
                </div>
              ))}
            </div>
          </ScrollArea>

          {/* Voice Recording Status */}
          {isListening && (
            <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-sm text-green-700">ƒêang nghe... H√£y n√≥i ƒëi·ªÅu b·∫°n mu·ªën</span>
              </div>
            </div>
          )}

          {/* Input Area */}
          <div className="flex gap-2">
            <Input
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder={`Nh·∫Øn tin v·ªõi ${aiContact.name}...`}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              className="flex-1"
            />
            <Button
              onClick={handleVoiceRecord}
              variant={isRecording ? "destructive" : "outline"}
              size="icon"
            >
              {isRecording ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
            </Button>
            <Button onClick={handleSendMessage} disabled={!inputText.trim()}>
              <Send className="w-4 h-4" />
            </Button>
          </div>

          {/* AI Personality Info */}
          <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-sm text-blue-700">
              <strong>T√≠nh c√°ch:</strong> {aiContact.personality}
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}